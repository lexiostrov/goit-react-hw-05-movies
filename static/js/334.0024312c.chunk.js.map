{"version":3,"file":"static/js/334.0024312c.chunk.js","mappings":"kPAiGA,UA3FqB,WAAO,IAAD,IACzB,GAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAYL,GAFvC,OAEUM,EAFV,OAGIP,EAAYO,GAHhB,gDAKIC,IAAAA,OAAAA,QACE,uDANN,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACR,IAEJ,IAiBMS,EAAY,oBAAGP,EAASQ,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OACE,2BACE,4BACE,SAAC,KAAD,CAAMC,GAAIH,EAAV,SAAwB,aACxB,2BACGX,IACC,gBACEe,IACEf,EAASgB,YAAT,yCACsChB,EAASgB,aAC3C,mDAENC,IAAKjB,EAASkB,eACdC,MAAM,MACNC,QAAQ,UAGZ,4BACE,0BACGpB,EAASkB,eAAe,KAtChB,WACnB,GAAIlB,GAAYA,EAASqB,aACvB,OAAO,IAAIC,KAAKtB,EAASqB,cAAcE,aAE1C,CAkCuCC,GAAe,QAE7C,yBAAG,eAjCJC,KAAKC,MAA8B,GAAxB1B,EAAS2B,cAiCY,QAC/B,wBAAI,cACJ,uBAAI3B,EAAS4B,YACb,wBAAI,YACJ,uBAlCU,WAClB,GAAI5B,GAAYA,EAAS6B,OAEvB,OADkB7B,EAAS6B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAC1BC,KAAK,IAEzB,CA6BaC,YAGR,4BACE,uBAAG,4BACH,2BACE,yBACE,SAAC,KAAD,CAAMpB,GAAG,OAAOF,MAAOR,EAASQ,MAAhC,SAAuC,YAIzC,yBACE,SAAC,KAAD,CAAME,GAAG,UAAUF,MAAOR,EAASQ,MAAnC,SAA0C,kBAK9C,SAAC,EAAAuB,SAAD,CAAUC,UAAU,yBAAK,uBAAzB,UACE,SAAC,KAAD,aAMX,C,8LC9FDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,cACzB9B,EADyB,yBAExBA,EAASgC,KAAKC,SAFU,2CAAH,qDAKjBlC,EAAW,mCAAG,WAAML,GAAN,uFACFmC,EAAAA,EAAAA,IAAA,iBACXnC,EADW,oBACQoC,EADR,oBADE,cACnB9B,EADmB,yBAIlBA,EAASgC,MAJS,2CAAH,sDAOXE,EAAO,mCAAG,WAAMxC,GAAN,uFACEmC,EAAAA,EAAAA,IAAA,iBACXnC,EADW,4BACgBoC,EADhB,oBADF,cACf9B,EADe,yBAIdA,EAASgC,KAAKG,MAJA,2CAAH,sDAOPC,EAAU,mCAAG,WAAM1C,GAAN,uFACDmC,EAAAA,EAAAA,IAAA,iBACXnC,EADW,4BACgBoC,EADhB,oBADC,cAClB9B,EADkB,yBAIjBA,EAASgC,KAAKC,SAJG,2CAAH,sDAOVI,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCAC+BQ,EAD/B,gCADA,cACjBtC,EADiB,yBAIhBA,EAASgC,KAAKC,SAJE,2CAAH,qD","sources":["components/pages/MovieDetails.jsx","components/servises/Api.js"],"sourcesContent":["import { getOneMovie } from '../servises/Api';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport Notiflix from 'notiflix';\n\nconst MovieDetails = () => {\n  const [oneMovie, setOneMovie] = useState('');\n\n  const { movieId } = useParams();\n\n  const location = useLocation();\n\n  useEffect(() => {\n    async function getMovie() {\n      try {\n        const response = await getOneMovie(movieId);\n        setOneMovie(response);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something went wrong, please try again later'\n        );\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  const getMovieYear = () => {\n    if (oneMovie && oneMovie.release_date) {\n      return new Date(oneMovie.release_date).getFullYear();\n    }\n  };\n\n  const getUserScore = () => {\n    return Math.round(oneMovie.vote_average * 10);\n  };\n\n  const genresMovie = () => {\n    if (oneMovie && oneMovie.genres) {\n      const newgenres = oneMovie.genres.map(genre => genre.name);\n      return newgenres.join(' ');\n    }\n  };\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <main>\n      <div>\n        <Link to={backLinkHref}>Go back</Link>\n        <div>\n          {oneMovie && (\n            <img\n              src={\n                oneMovie.poster_path\n                  ? `https://image.tmdb.org/t/p/w300${oneMovie.poster_path}`\n                  : 'https://via.placeholder.com/300x450?text=No+foto'\n              }\n              alt={oneMovie.original_title}\n              width=\"300\"\n              loading=\"lazy\"\n            />\n          )}\n          <div>\n            <h1>\n              {oneMovie.original_title} ({getMovieYear()})\n            </h1>\n            <p>User score: {getUserScore()}%</p>\n            <h2>Overview</h2>\n            <p>{oneMovie.overview}</p>\n            <h3>Genres</h3>\n            <p>{genresMovie()}</p>\n          </div>\n        </div>\n        <div>\n          <p>Additional Information</p>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={location.state}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={location.state}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'adbaaa313d0e444758a876cd96774671';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const getOneMovie = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n"],"names":["useState","oneMovie","setOneMovie","movieId","useParams","location","useLocation","useEffect","getOneMovie","response","Notiflix","getMovie","backLinkHref","state","from","to","src","poster_path","alt","original_title","width","loading","release_date","Date","getFullYear","getMovieYear","Math","round","vote_average","overview","genres","map","genre","name","join","genresMovie","Suspense","fallback","axios","KEY","getTrendingMovies","data","results","getCast","cast","getReviews","getMovies","query"],"sourceRoot":""}