{"version":3,"file":"static/js/7.29b20b61.chunk.js","mappings":"qOAyFA,UApFe,WAAO,IAAD,EACnB,GAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAM,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,GAC7C,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAwCA,OA/BAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,gHAE2BC,EAAAA,EAAAA,IAAUN,GAFrC,UAEUO,EAFV,QAGUC,EAAMD,EAASE,KACnB,kBAAoE,CAClEC,GADF,EAAGA,GAEDC,eAFF,EAAOA,eAGLC,YAHF,EAAuBA,YAIrBC,aAJF,EAAoCA,aAKlCC,WALF,EAAkDA,WAAlD,MAQSN,EAAIO,OAAS,GACtBX,EAAUI,GAEO,IAAfA,EAAIO,OAfZ,yCAgBaC,IAAAA,OAAAA,KACL,oEAjBR,yDAqBIA,IAAAA,OAAAA,QACE,uDAtBN,2DAFc,sBACC,KAAXhB,GADU,mCA4BdiB,EACD,GAAE,CAACjB,KAGF,4BACE,kBAAMkB,SAxCW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,OAAOF,MAAMG,OAEpCzB,EAAgB,CAAEC,OAAQqB,GAC3B,EAmCG,WACE,kBACEI,KAAK,SACLC,KAAK,SACLC,YAAY,mBACZC,aAAa,MACbC,WAAS,KAEX,mBAAQH,KAAK,SAAb,SAAsB,eAExB,wBACGvB,EAAOM,KACN,gBAAGG,EAAH,EAAGA,YAAaD,EAAhB,EAAgBA,eAAgBc,EAAhC,EAAgCA,KAAMf,EAAtC,EAAsCA,GAAtC,EAA0CG,aAA1C,OACE,yBACE,SAAC,KAAD,CACEiB,GAAE,kBAAapB,GACfqB,MAAO,CAAEC,KAAK,kBAAD,OAAoBhC,IAFnC,UAIE,4BACE,4BACE,gBACEiC,IAAG,0CAAqCrB,GACxCsB,IAAKvB,KAEP,uBAEF,0BACE,yBAAMA,GAAkBc,YAdvBf,EADX,QAyBT,C,8LCtFDyB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,cACzB7B,EADyB,yBAExBA,EAAS+B,KAAKC,SAFU,2CAAH,qDAKjBC,EAAW,mCAAG,WAAMC,GAAN,uFACFN,EAAAA,EAAAA,IAAA,iBACXM,EADW,oBACQL,EADR,oBADE,cACnB7B,EADmB,yBAIlBA,EAAS+B,MAJS,2CAAH,sDAOXI,EAAO,mCAAG,WAAMD,GAAN,uFACEN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBL,EADhB,oBADF,cACf7B,EADe,yBAIdA,EAAS+B,KAAKK,MAJA,2CAAH,sDAOPC,EAAU,mCAAG,WAAMH,GAAN,uFACDN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACgBL,EADhB,oBADC,cAClB7B,EADkB,yBAIjBA,EAAS+B,KAAKC,SAJG,2CAAH,sDAOVjC,EAAS,mCAAG,WAAMuC,GAAN,uFACAV,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCAC+BS,EAD/B,gCADA,cACjBtC,EADiB,yBAIhBA,EAAS+B,KAAKC,SAJE,2CAAH,qD","sources":["components/pages/Movies.jsx","components/servises/Api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getMovies } from '../servises/Api';\nimport Notiflix from 'notiflix';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filter = searchParams.get('filter') ?? '';\n  const [movies, setMovies] = useState([]);\n\n  const handleChange = e => {\n    e.preventDefault();\n    const value = e.target.search.value.trim();\n\n    setSearchParams({ filter: value });\n  };\n\n  useEffect(() => {\n    if (filter === '') return;\n    async function getMoviesList() {\n      try {\n        const response = await getMovies(filter);\n        const arr = response.map(\n          ({ id, original_title, poster_path, vote_average, vote_count }) => ({\n            id,\n            original_title,\n            poster_path,\n            vote_average,\n            vote_count,\n          })\n        );\n        if (arr && arr.length > 0) {\n          setMovies(arr);\n        }\n        if (arr.length === 0) {\n          return Notiflix.Notify.info(\n            'Sorry, the movie you requested was not found. Please try again.'\n          );\n        }\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, something went wrong, please try again later'\n        );\n      }\n    }\n    getMoviesList();\n  }, [filter]);\n\n  return (\n    <div>\n      <form onSubmit={handleChange}>\n        <input\n          name=\"search\"\n          type=\"search\"\n          placeholder=\"Search movies...\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\">SEARCH</button>\n      </form>\n      <ul>\n        {movies.map(\n          ({ poster_path, original_title, name, id, vote_average }) => (\n            <li key={id}>\n              <Link\n                to={`/movies/${id}`}\n                state={{ from: `/movies?filter=${filter}` }}\n              >\n                <div>\n                  <div>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                      alt={original_title}\n                    />\n                    <div></div>\n                  </div>\n                  <div>\n                    <div>{original_title || name}</div>\n                  </div>\n                </div>\n              </Link>\n            </li>\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'adbaaa313d0e444758a876cd96774671';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const getOneMovie = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n"],"names":["useSearchParams","searchParams","setSearchParams","filter","get","useState","movies","setMovies","useEffect","getMovies","response","arr","map","id","original_title","poster_path","vote_average","vote_count","length","Notiflix","getMoviesList","onSubmit","e","preventDefault","value","target","search","trim","name","type","placeholder","autoComplete","autoFocus","to","state","from","src","alt","axios","KEY","getTrendingMovies","data","results","getOneMovie","movieId","getCast","cast","getReviews","query"],"sourceRoot":""}